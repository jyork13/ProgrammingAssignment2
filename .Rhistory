## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
## Store the working directory of the specified directory containing files
wd <- paste("./", directory, sep="")
## get list of files to associate with id's
all_pm_files <- dir(wd, full.names=TRUE)
## Filter file list to those requested in variable id
id_files <- all_pm_files[id]
for(i in seq_along(id)){
##print(i)
##print(id_files[i])
df = data.frame(read.csv(id_files[i]))
if(!exists("cc")){
cc <- data.frame(id = id[i], nobs = sum(complete.cases(df)))
##print(cc)
} else{
temp_cc <- data.frame(id = id[i], nobs = sum(complete.cases(df)))
cc <- rbind(cc, temp_cc)
##print(temp_cc)
}
}
## Return result
cc
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
cc <- NULL
cc <- complete("specdata", 1:332)
#print(cc)
newdata <- cc[ which(cc$nobs > threshold), ]
## Store the working directory of the specified directory containing files
wd <- paste("./", "specdata", sep="")
## get list of files to associate with id's
all_pm_files <- dir(wd, full.names=TRUE)
## Filter file list to those requested in variable id
id_files <- all_pm_files[newdata$id]
temp <- lapply(id_files,read.csv)
for(i in seq_along(temp)){
newdf <- data.frame(temp[i])
if(!exists("my_corr")){
my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
##print(cc)
} else{
temp_my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
my_corr <- c(my_corr, temp_my_corr)
##print(temp_cc)
}
}
my_corr
}
cr <- corr("specdata", 150)
head(cr)
x2 <- pi * 100^(-1:3)
round(x2, 3)
x <- pi
x
round(x, 5)
round(x, 4)
head(round(cr, 5))
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
cc <- NULL
cc <- complete("specdata", 1:332)
#print(cc)
newdata <- cc[ which(cc$nobs > threshold), ]
## Store the working directory of the specified directory containing files
wd <- paste("./", "specdata", sep="")
## get list of files to associate with id's
all_pm_files <- dir(wd, full.names=TRUE)
## Filter file list to those requested in variable id
id_files <- all_pm_files[newdata$id]
temp <- lapply(id_files,read.csv)
for(i in seq_along(temp)){
newdf <- data.frame(temp[i])
if(!exists("my_corr")){
my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
##print(cc)
} else{
temp_my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
my_corr <- c(my_corr, temp_my_corr)
##print(temp_cc)
}
}
round(my_corr, 5)
}
cr <- corr("specdata", 150)
head(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
cc <- NULL
cc <- complete("specdata", 1:332)
#print(cc)
newdata <- cc[ which(cc$nobs > threshold), ]
## Store the working directory of the specified directory containing files
wd <- paste("./", "specdata", sep="")
## get list of files to associate with id's
all_pm_files <- dir(wd, full.names=TRUE)
## Filter file list to those requested in variable id
id_files <- all_pm_files[newdata$id]
temp <- lapply(id_files,read.csv)
for(i in seq_along(temp)){
newdf <- data.frame(temp[i])
if(!exists("my_corr")){
my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
##print(cc)
} else{
temp_my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
my_corr <- c(my_corr, temp_my_corr)
##print(temp_cc)
}
}
if(!exists("my_corr")){
my_corr <- 0
} else{
round(my_corr, 5)
}
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
cc <- NULL
cc <- complete("specdata", 1:332)
#print(cc)
newdata <- cc[ which(cc$nobs > threshold), ]
## Store the working directory of the specified directory containing files
wd <- paste("./", "specdata", sep="")
## get list of files to associate with id's
all_pm_files <- dir(wd, full.names=TRUE)
## Filter file list to those requested in variable id
id_files <- all_pm_files[newdata$id]
temp <- lapply(id_files,read.csv)
for(i in seq_along(temp)){
newdf <- data.frame(temp[i])
if(!exists("my_corr")){
my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
##print(cc)
} else{
temp_my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
my_corr <- c(my_corr, temp_my_corr)
##print(temp_cc)
}
}
if(!exists("my_corr")){
my_corr <- 0
} else{
round(my_corr, 5)
}
}
submit()
cc <- NULL
cc <- complete("specdata", 1:332)
#print(cc)
newdata <- cc[ which(cc$nobs > 2000), ]
## Store the working directory of the specified directory containing files
wd <- paste("./", "specdata", sep="")
## get list of files to associate with id's
all_pm_files <- dir(wd, full.names=TRUE)
## Filter file list to those requested in variable id
id_files <- all_pm_files[newdata$id]
newdata
length(newdata)
NROW(newdata)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
cc <- NULL
cc <- complete("specdata", 1:332)
#print(cc)
newdata <- cc[ which(cc$nobs > threshold), ]
if(nrow(newdata)==0){
my_corr <- 0
} else{
## Store the working directory of the specified directory containing files
wd <- paste("./", "specdata", sep="")
## get list of files to associate with id's
all_pm_files <- dir(wd, full.names=TRUE)
## Filter file list to those requested in variable id
id_files <- all_pm_files[newdata$id]
temp <- lapply(id_files,read.csv)
for(i in seq_along(temp)){
newdf <- data.frame(temp[i])
if(!exists("my_corr")){
my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
##print(cc)
} else{
temp_my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
my_corr <- c(my_corr, temp_my_corr)
##print(temp_cc)
}
}
round(my_corr, 5)
}
}
cr <- corr("specdata", 2000)
head(cr)
submit()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
cc <- NULL
cc <- complete("specdata", 1:332)
#print(cc)
newdata <- cc[ which(cc$nobs > threshold), ]
if(nrow(newdata)==0){
my_corr <- 0
} else{
## Store the working directory of the specified directory containing files
wd <- paste("./", "specdata", sep="")
## get list of files to associate with id's
all_pm_files <- dir(wd, full.names=TRUE)
## Filter file list to those requested in variable id
id_files <- all_pm_files[newdata$id]
temp <- lapply(id_files,read.csv)
for(i in seq_along(temp)){
newdf <- data.frame(temp[i])
if(!exists("my_corr")){
my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
##print(cc)
} else{
temp_my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
my_corr <- c(my_corr, temp_my_corr)
##print(temp_cc)
}
}
round(my_corr, 5)
}
}
cr <- corr("specdata", 2000)
head(cr)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit
submit()
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
## Store the working directory of the specified directory containing files
wd <- paste("./", directory, sep="")
## get list of files to associate with id's
all_pm_files <- dir(wd, full.names=TRUE)
## Filter file list to those requested in variable id
id_files <- all_pm_files[id]
for(i in seq_along(id)){
##print(i)
##print(id_files[i])
df = data.frame(read.csv(id_files[i]))
if(!exists("cc")){
cc <- data.frame(id = id[i], nobs = sum(complete.cases(df)))
##print(cc)
} else{
temp_cc <- data.frame(id = id[i], nobs = sum(complete.cases(df)))
cc <- rbind(cc, temp_cc)
##print(temp_cc)
}
}
## Return result
cc
}
submit()
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr2 <- numeric()
length(cr2)
summary(cr2)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
cc <- NULL
cc <- complete("specdata", 1:332)
#print(cc)
newdata <- cc[ which(cc$nobs > threshold), ]
if(nrow(newdata)==0){
my_corr <- numeric()
} else{
## Store the working directory of the specified directory containing files
wd <- paste("./", "specdata", sep="")
## get list of files to associate with id's
all_pm_files <- dir(wd, full.names=TRUE)
## Filter file list to those requested in variable id
id_files <- all_pm_files[newdata$id]
temp <- lapply(id_files,read.csv)
for(i in seq_along(temp)){
newdf <- data.frame(temp[i])
if(!exists("my_corr")){
my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
##print(cc)
} else{
temp_my_corr <- cor(newdf$nitrate, newdf$sulfate, use="pairwise.complete.obs")
my_corr <- c(my_corr, temp_my_corr)
##print(temp_cc)
}
}
round(my_corr, 5)
}
}
submit()
setwd("~/GitHub/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
View(cachemean)
View(cachemean)
makevector(c(1,3,5))
# `makeVector` creates a special "vector", which is
# really a list containing a function to
#
# 1.  set the value of the vector
# 2.  get the value of the vector
# 3.  set the value of the mean
# 4.  get the value of the mean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makevector(c(1,3,5))
v <- c(1,3,5)
class(v)
v
setwd("~/GitHub/ProgrammingAssignment2")
makevector(c(1,3,5))
ls
ls()
View(makeVector)
View(makeVector)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(1,3,5))
sv <- makeVector(c(1,3,5))
sv
sv <- cachemean(c(1,3,5))
sv <- cachemean(c(1,3,5), ...)
a <- makeVector(c(1,2,3,4))
a$get()
a$get()
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
a$get()
a$getmean()
cachemean(a)
cachemean(a)
> x <- 10
> test <- function(x) {
+  x <- x - 5
+   print(x)
> x <- 10
> test <- function(x) {
x <- x - 5
x <- 10
test <- function(x) {
x <- x - 5
print(x)
}
test(x)
x
test <- function(x) {
+   # The only difference here is using <<- instead of <-
+   x <<- x - 5
+   y <<- x - 5
+ }
test <- function(x) {
# The only difference here is using <<- instead of <-
x <<- x - 5
y <<- x - 5
}
x <- 10
x
y
test(x)
x
y
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
cachemean(a)
